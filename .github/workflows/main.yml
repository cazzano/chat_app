# Put this file in .github/workflows/ on your main branch
name: Build and Release Flutter Apps

permissions:
  contents: write  # Allows creating releases and pushing tags
  actions: read

on: 
  workflow_dispatch:  # Only manual triggering from GitHub Actions menu

env:
  RELEASE_TAG: "vr-1.0"  # ← Change this tag version here
  RELEASE_DESCRIPTION: "thrilled to show case project."  # ← Change description here

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout flutter branch
        uses: actions/checkout@v4
        with:
          ref: flutter

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Disable analytics
        run: flutter config --no-analytics

      - name: Install dependencies
        run: flutter pub get

      - name: Build APK
        run: flutter build apk --release

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/app-release.apk

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout flutter branch
        uses: actions/checkout@v4
        with:
          ref: flutter

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install Linux dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev

      - name: Disable analytics
        run: flutter config --no-analytics

      - name: Enable Linux desktop
        run: flutter config --enable-linux-desktop

      - name: Install dependencies
        run: flutter pub get

      - name: Build Linux
        run: flutter build linux --release

      - name: Archive Linux build
        run: |
          cd build/linux/x64/release/bundle
          tar -czf ../../../../../linux-release.tar.gz *

      - name: Upload Linux build
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: linux-release.tar.gz

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout flutter branch
        uses: actions/checkout@v4
        with:
          ref: flutter

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Disable analytics
        run: flutter config --no-analytics

      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows
        run: flutter build windows --release

      - name: Archive Windows build
        run: |
          Compress-Archive -Path build/windows/x64/runner/Release/* -DestinationPath windows-release.zip

      - name: Upload Windows build
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: windows-release.zip

  release:
    needs: [build-android, build-linux, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch full history for tagging

      - name: Check if release exists and delete if same tag
        run: |
          # Check if release with same tag exists
          RELEASE_ID=$(gh release view "${{ env.RELEASE_TAG }}" --json id --jq .id 2>/dev/null || echo "")
          if [ ! -z "$RELEASE_ID" ]; then
            echo "Release with tag ${{ env.RELEASE_TAG }} exists. Deleting it..."
            gh release delete "${{ env.RELEASE_TAG }}" --yes
          fi
          
          # Delete tag if it exists
          git tag -d "${{ env.RELEASE_TAG }}" 2>/dev/null || true
          git push origin --delete "${{ env.RELEASE_TAG }}" 2>/dev/null || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          # Create new tag with defined version
          git tag -a "${{ env.RELEASE_TAG }}" -m "${{ env.RELEASE_DESCRIPTION }}"
          git push origin "${{ env.RELEASE_TAG }}"

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ github.event.inputs.tag_name }}"
          release_name: "Release ${{ github.event.inputs.tag_name }}"
          body: "${{ github.event.inputs.release_description }}"
          draft: false
          prerelease: false

      - name: Upload Android APK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./android-apk/app-release.apk
          asset_name: chat-application-android-${{ github.event.inputs.tag_name }}.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload Linux Build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux-build/linux-release.tar.gz
          asset_name: chat-application-linux-${{ github.event.inputs.tag_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows Build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows-build/windows-release.zip
          asset_name: chat-application-windows-${{ github.event.inputs.tag_name }}.zip
          asset_content_type: application/zip
